
LOG DOCUMENTING HOW NORM FILES WERE GENERATED
=============================================

In [2]: av = np.loadtxt('average_Block01.txt')

In [3]: sd = np.loadtxt('stdev_average_Block01.txt')

In [4]: nm = np.zeros(shape=(90,90))

..

In [6]: for i in np.arange(90):
    for j in np.arange(90):
        try:
            nm[i,j] = av[i,j]/sd[i,j]
        except:
            nm[i,j] = 0            

In [7]: for i in np.arange(90):
    for j in np.arange(90):
        if np.isnan(nm[i,j]):
            nm[i,j] = 0

..

In [9]: nm.sum()
Out[9]: 10430.800535989005

In [10]: for i in np.arange(90):
    for j in np.arange(90):
        nm[i,j] = nm[i,j] / 10430.800535989005

..

In [12]: nm.sum()
Out[12]: 0.999999999999997

..

In [14]: nm = nm.flatten()

In [15]: lnm = list(nm)

In [16]: lnm.sort()

In [17]: lnm[8100-594]
Out[17]: 0.00035317083392948925

..

In [19]: thr_nm = np.zeros(8100)

In [20]: for i in np.arange(8100):
    if nm[i] < 0.00035317083392948925:
        thr_nm[i] = 0
    else:
        thr_nm[i] = 1
   ....:         

In [21]: thr_nm = thr_nm.reshape(90,90)

In [22]: imshow(thr_nm)
Out[22]: <matplotlib.image.AxesImage at 0x3a002d0>

..

In [26]: np.savetxt('norm_average_Block01_cost0.15.txt',thr_nm)

In [27]: np.savetxt('norm_average_Block01.txt',nm)


In [29]: import networkx as nx

In [30]: g = nx.Graph()

In [31]: for i in np.arange(90):
    for j in np.arange(90):
        if thr_nm[i,j] == 1:
            g.add_edge(i,j)

..

In [32]: nx.write_gpickle(g,'norm_average_graph_cost0.15.gpickle')
